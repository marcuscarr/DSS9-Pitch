sampleTimes[grep("^2012", sampleTimes),]
sampleTimes[grep("^2012", sampleTimes)]
weekday(sampleTimes[grep("^2012", sampleTimes)])
weekdays(sampleTimes[grep("^2012", sampleTimes)])
weekdays(sampleTimes[grep("^2012", sampleTimes)]) == "Monday"
summary(weekdays(sampleTimes[grep("^2012", sampleTimes)]) == "Monday")
?match
x <- rnorm(100)
hist(x)
y <- rnorm(100)
plot(x, y)
plot(x, y, pch = 20)
plot(x, y, pch = 19)
plot(x, y, pch = 2)
plot(x, y, pch = 3)
plot(x, y, pch = 4)
example(points)
plot(x, y)
x <- rnorm(100)
y <- rnorm(100)
plot(x, y)
plot(x, y, pch = 20)
title("Scatterplot")
text(-2, -2, "Label")
legent("topleft", legend = "Data", pch = 20)
legend("topleft", legend = "Data", pch = 20)
fit <- lm(y~x)
abline(fit)
abline(fit, lwd = 3, col = "blue")
plot(x, y, xlab = "Weight", ylab = "Height", main = "Scatterplot", pch = 20)
legend("topright", legend = "Data", pch = 20)
abline(fit, lwd = 3, col = "red")
z <- rpois(100, 2)
par(mfrow = c(2, 1))
plot(x, y, pch = 20)
install.packages("RColorBrewer")
install.packages("httr")
?data.frame
baseline <- c(140, 138, 150, 148, 135)
week2 <- c(132, 135, 151, 146, 130)
df <- data.frame(wk0 = baseline, wk2 = week2)
df
?t.test
t.test(df, paired = TRUE)
t.test(baseline, week2, paired = TRUE)
1100 + c(-1, 1) * dt(0.025)
?dt
1100 + c(-1, 1) * dt(0.025, df = 8)
1100 + 30 * c(-1, 1) * dt(0.025, df = 8)
1100 + 30 * c(-1, 1) * dt(0.025, df = 8, lower.tail = FALSE)
1100 + 30 * c(-1, 1) * pt(0.025, df = 8)
pt(0.025, df = 8)
dt(0.025, df = 8)
pt(0.025, df = 8)
1100 + 30 * c(-1, 1) * pt(0.025, df = 8, lower.tail = FALSE)
1100 + 30 * c(-1, 1) * pt(0.025, df = 8, lower.tail = TRUE)
1100 + 30 * c(-1, 1) * pt(0.025, df = 9, lower.tail = TRUE)
1100 + 30 * c(-1, 1) * pt(0.025, df = 9, lower.tail = FALSE)
1100 + 30 * c(-1, 1) * pt(0.05, df = 9, lower.tail = FALSE)
1100 + 30 * c(-1, 1) * dt(0.05, df = 9, lower.tail = FALSE)
1100 + 30 * c(-1, 1) * dt(0.05, df = 9)
1100 + 30 * c(-1, 1) * qt(0.05, df = 9)
1100 + 30 * c(-1, 1) * qt(0.025, df = 8)
1100 + 30 * c(-1, 1) * qt(0.025, df = 8, lower.tail = FALSE)
1100 + 30 / sqrt(8) * c(-1, 1) * qt(0.025, df = 8)
1100 + 30 / sqrt(8) * c(-1, 1) * qt(0.975, df = 8)
1100 + 30 / sqrt(8) * c(-1, 1) * qt(0.975, df = 9)
1100 + 30 / sqrt(9) * c(-1, 1) * qt(0.975, df = 8)
?t.test
t.test(1:10, y = c(7:20))
?binom.test
binom.test(c(3,1), p = 0.5)
binom.test(10, 1787, p = 0.01)
binom.test(10, 1787, p = 0.01, "l")
binom.test(c(3,1), p = 0.5, "g")
binom.test(c(3,1), p = 0.5, "l")
binom.test(c(3,1), p = 0.5, alternative = "greater")
?t.test
sp <- ((9 - 1) * 1.5^2 + (9 - 1) * 1.8^2) / (9 + 9 - 2)
sp
sp <- sqrt(sp)
-3 - 1 + c(-1, 1) * qt(0.025, df = 9 + 9 - 2) * sp * sqrt(2/9)
-3 - 1 + c(-1, 1) * qt(0.005, df = 9 + 9 - 2) * sp * sqrt(2/9)
?pwr.t.test
install.packages("pwr:)")
install.packages("pwr")
library(pwr)
?pwr.t.test
pwr.t.test(n = 100, d = 0.01/0.04)
pwr.t.test(n = 100, d = 0.01/0.04, alternative = "less")
pwr.t.test(n = 100, d = 0.01/0.04, sig.level = 0.10)
pwr.t.test(n = 100, d = 0.01/0.04, alternative = "greater")
pwr.t.test(n = 100, d = 0.01/0.04, alternative = "greater", sig.level = 0.10)
pwr.t.test(n = 200, d = 0.01/0.04, alternative = "greater", sig.level = 0.10)
pwr.t.test(n = 180, d = 0.01/0.04, alternative = "greater", sig.level = 0.10)
pwr.t.test(n = 160, d = 0.01/0.04, alternative = "greater", sig.level = 0.10)
pwr.t.test(n = 160, d = 0.01/0.04, alternative = "greater", sig.level = 0.05)
pwr.t.test(n = 140, d = 0.01/0.04, alternative = "greater", sig.level = 0.05)
pwr.t.test(n = 140, d = 0.01/0.04, sig.level = 0.05)
pwr.t.test(n = 140, d = 0.01/0.04, sig.level = 0.05, type = "paired")
pwr.t.test(n = 160, d = 0.01/0.04, sig.level = 0.05, type = "paired")
pwr.t.test(n = 160, d = 0.01/0.04, sig.level = 0.05, type = "paired", alternative = "greater")
pwr.t.test(n = 140, d = 0.01/0.04, sig.level = 0.05, type = "paired", alternative = "greater")
pwr.t.test(n = 100, d = 0.01/0.04, sig.level = 0.05, type = "paired", alternative = "greater")
?pnorm
pnorm(0.05)
pnorm(0.025)
dnorm(0.025)
pnorm(1)
pnorm(2)
pnorm(sqrt(2))
pnorm(3)
pnorm(-3)
1-pnorm(-3)
44 - 42.04 + c(-1, 1) * 12/sqrt(288 + 288 -2) * pnorm(0.025)
44 - 42.04 + c(-1, 1) * 12/sqrt(288 + 288 -2) * pnorm(0.05)
44 - 42.04 + c(-1, 1) * 12/sqrt(288 + 288 -2) * pnorm(0.005)
44 - 42.04 + c(-1, 1) * 12/sqrt(288 + 288 -2) * qnorm(0.005)
44 - 42.04 + c(-1, 1) * 12/sqrt(288 + 288 -2) * qnorm(0.05)
(44 - 42.04) / (12/sqrt(288))
qnorm(1 - 0.05/2)
c(-1, 1) * qnorm(1 - 0.05 / 2)
c(-1, 1) * qnorm(1 - 0.005 / 2)
c(-1, 1) * qnorm(1 - 0.01 / 2)
2 * pnorm((44 - 42.04) / (12/sqrt(288)))
pnorm(1.9944)
install.packages("usingR")
install.packages("UsingR")
library(UsingR)
install.packages("Formula")
install.packages("Formula")
library(UsingR)
install.packages("tcltk")
which(R)
x <- seq(4.5, 7, by = 0.01)
y_wt1 <- dnorm(x, mean = 4.91, sd = 0.68)
plot(y_wt1 ~ x)
?plor
?dcauchy
y_wt1 <- dcauchy(x, location = 4.91, scale = 0.68)
plot(y_wt1 ~ x)
plot(y_wt1 ~ x, type = "l")
y_wt2 <- dcauchy(x, location = 4.87, scale = 1.13)
y_g1 <- dcauchy(x, location = 4.87, scale = 1.13)
y_dm1 <- dcauchy(x, location = 4.93, scale = 0.79)
lines(y_g1 ~ x)
lines(y_dm1 ~ x)
lines(y_g1 ~ x, color = "blue")
y_wt2 <- dcauchy(x, location = 5.72, scale = 0.68)
y_wt2 <- dcauchy(x, location = 5.72, scale = 0.68)
y_g2 <- dcauchy(x, location = 5.65, scale = 1.13)
y_dm2 <- dcauchy(x, location = 5.80, scale = 0.79)
plot(y_wt2 ~ x, type = "l")
lines(y_dm2 ~ x)
lines(y_g2 ~ x)
y_wt3 <- dcauchy(x, location = 6.70, scale = 0.68)
y_g2 <- dcauchy(x, location = 6.41, scale = 1.13)
y_dm3 <- dcauchy(x, location = 6.84, scale = 0.79)
y_g3 <- dcauchy(x, location = 6.41, scale = 1.13)
plot(y_wt3 ~ x, type = "l")
lines(y_dm3 ~ x)
lines(y_g3 ~ x)
plot(y_wt3 ~ x, type = "l", xlim = c(0, 8))
x <- seq(0, 8, by = 0.01)
y_wt3 <- dcauchy(x, location = 6.70, scale = 0.68)
plot(y_wt3 ~ x, type = "l", xlim = c(0, 8))
y_dm3 <- dcauchy(x, location = 6.84, scale = 0.79)
y_g3 <- dcauchy(x, location = 6.41, scale = 1.13)
lines(y_dm3 ~ x)
lines(y_g3 ~ x)
y_wt2 <- dcauchy(x, location = 5.72, scale = 0.68)
y_g2 <- dcauchy(x, location = 5.65, scale = 1.13)
y_dm2 <- dcauchy(x, location = 5.80, scale = 0.79)
y_wt1 <- dcauchy(x, location = 4.91, scale = 0.68)
y_g1 <- dcauchy(x, location = 4.87, scale = 1.13)
y_dm1 <- dcauchy(x, location = 4.93, scale = 0.79)
lines(y_wt2 ~ x)
lines(y_dm2 ~ x)
lines(y_g2 ~ x)
lines(y_wt1 ~ x)
lines(y_dm1 ~ x)
lines(y_g1 ~ x)
library(UsingR)
library(UsingR)
data(galton)
par(mfrow = c(1,2))
hist(galton$child, col = "blue", breaks = 100)
hist(galton$parent, col = "blue", breaks = 100)
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
par(mfrow = c(1,1))
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(rmarkdown)
library(knitr)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(x * w) / sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
sum(x * y) / sum(x ** 2)
data(mtcars)
str(mtcars)
?lm
lm(mpg ~ wt, data = mtcars)
lm(wt ~ mpg, data = mtcars)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
xnorm <- (x - mean(x)) / sd(x)
xnorm
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
cor(x, y)
cor(y, x)
install.packages("shiny")
library(shiny)
manipulate
library(manipulate)
data(anscombe)
example(anscombe)
quit()
install.packages("devtools")
library(devtools)
install_github("slidyfy", "ramnathv")
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
?lm
lm(y ~ x)
fit <- lm(y ~ x)
?fit
resid(fit)
e <- resid(fit)
e.man <- y - fit$coefficients[1] - fit$coefficients[2] * x
e.man
sigma <- sqrt(sum(e^2) / (7))
n - len(x)
n <- len(x)
n <- length(x)
sigma <- sqrt(sum(e^2) / (n - 2))
ssx <- sum((x - mean(x))^2)
beta1 <- fit$coefficients[2]
beta1.se <- sigma / ssx
beta1.se <- sigma / sqrt(ssx)
qt(0.975)
qt(0.975, df = n - 2)
qt(0.975, df = n - 2, lower.tail = FALSE)
?qt
dt(0.975, df = n - 2, lower.tail = FALSE)
dt(0.975, df = n - 2)
beta1 + c(-1, 1) * qt(0.975, df = fit$df)
beta1 + c(-1, 1) * qt(0.975, df = fit$df) * beta1.se
beta1 + c(-1, 1) * qt(0.05296, df = fit$df) * beta1.se
sigma
data(mtcars)
y <- mtcars$mpg
fit <- lm(mpg ~ weight, data = mtcars)
fit <- lm(mpg ~ wt, data = mtcars)
fit
wt.avg <- mean(mtcars$wt)
plot(mpg ~ wt, data = mtcars)
plot(fit)
plot(mpg ~ wt, data = mtcars)
fit$coefficients
fit$coefficients[1]
summary(fit)
summary(fit)$coefficients
predict(fit)
predict(fit, x = wt.average)
predict(fit, x = wt.average, interval = "predict")
?predict
predict(fit, data.frame(wt = wt.average), interval = "predict")
predict(fit, data.frame(wt = wt.avg), interval = "predict")
predict(fit, data.frame(wt = wt.avg), interval = "confidence")
?mtcars
predict(fit, data.frame(wt = 3), interval = "confidence")
predict(fit, data.frame(wt = 3), interval = "predict")
predict(fit, data.frame(wt = 2), interval = "predict")
predict(fit, data.frame(wt = 2), interval = "confidence")
fit
summary(fit)
fit.coeff <- summary(fit)$coefficients
fit.coeff
fit.coeff[2,1]
fit.coeff[2,1] + c(1, -1) * qt(0.975, df = fit$df) * fit.coeff[2,2]
fit$residuals
sum(fit$residuals ^ 2)
?lm
fit.noint <- lm(mpg ~ wt - 1, data = mtcars)
sum(fit.noint$residuals ^ 2)
sum(fit.noint$residuals ^ 2) / sum(fit$residuals ^ 2)
sum(fit$residuals)
sum(fit.noint$residuals)
summary(fit)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
summary(fit)
fit <- lm(mpg ~ wt, data = mtcars)
summary(fit)
predict(fit, data.frame(wt = 3))
predict(fit, data.frame(wt = 3), interval = "predict")
fit.coeff
fit.coeff[2,1] * 2 + 2 * c(1, -1) * qt(0.975) * fit.coeff[2.2]
fit.coeff[2,1] * 2 + 2 * c(1, -1) * qt(0.975, df = fit$df) * fit.coeff[2.2]
c(1, -1) * qt(0.975, df = fit$df) * fit.coeff[2.2]
fit.coeff[2,2]
fit.coeff[2,1] * 2 + 2 * c(1, -1) * qt(0.975, df = fit$df) * fit.coeff[2,2]
fit.resid <- summary(fit)$residuals
fit.noint.resid <- summary(fit.noint)$residuals
sum(fit.resid) / sum(fit.noint.resid)
sum(fit.resid ^ 2) / sum(fit.noint.resid ^ 2)
.0707^2
sqrt(.0707)
date(format = "%D")
date(format = "%d")
date(format = "%T")
?date
format(date(), format = "%T")
format(date(), format = "%D")
format(date(), format = "%h")
data(package = .packages(all.available = TRUE))'
data(package = .packages(all.available = TRUE))
data(nuclear)
?nuclear
data(CO2)
?CO2
source('~/.active-rstudio-document', echo=TRUE)
summary(mtcars)
str(mtcars)
?boxplot
boxplot(cyl ~ am, data = mtcars)
with(mtcars[am == "automatic"], mean(cyl))
with(mtcars[am == "automatic",], mean(cyl))
with(mtcars[mtcars$am == "automatic",], mean(cyl))
with(mtcars[mtcars$am == "manual",], mean(cyl))
mtcars$mpg.inv <- 1 / mtcars$mpg
fit <- lm(mpg.inv ~ . - mpg - 1, data = mtcars)
summary(fit)
vcov(mtcars)
?vcov
vcov(fit)
round(vcov(fit), 3)
round(vcov(fit), -3)
round(vcov(fit), -4)
vcov(fit)
max(vcov(fit))
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
xw
x*w
sum(x*w)/sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
summary(lm(y~x))
data(mtcars)
fit <- lm(mpg ~ w, data=mtcars)
summary(mtcars)
fit <- lm(mpg ~ wt, data=mtcars)
summary(fit)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(x - mean(x))/stdev(x)
(x - mean(x))/std(x)
(x - mean(x))/st(x)
?stdev
(x - mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
summary(lm(y~x - 1))
library(utils)
gunzip
source('~/Dropbox/job/data_incubator_challenge/bikedata.R', echo=TRUE)
wd()
getwd()
setwd("../dataprod/")
author("trees-pitch")
library(slidify)
author("trees-pitch")
?qplot
?ggolot
library(ggplot2)
?qplot
library(gridExtra)
?gridExtra
?grid.arrange
p <- ggplot(trees)
p + aes(Height, Volume)
p + aes(Height, Volume) + geom_point()
p <- ggplot(trees) + geom_point()
p + aes(Height, Volume)
p + aes(Height, Volume) + geom_smooth()
p + aes(Height, Volume) + geom_smooth(method="lm")
?grid.arrange
p <- ggplot(trees) + geom_point()
p1 <- p + aes(Height, Volume) + geom_smooth(method="lm")
p2 <- p + aes(Girth, Volume) + geom_smooth(method="lm")
grid.arrange(p1, p2, ncol=2)
grid.arrange(p1, p2, ncol=2, main=2)
grid.arrange(p1, p2, ncol=2, main=2px)
?grid.arrange
grid.arrange(p1, p2, ncol=2, main="Hi")
grid.arrange(p1, p2)
lm_r2 <- function(lm) {
r2 <- format(summary(lm)$r.squared, 2)
paste(italic(r)^2, r2)
}
lm_r2(fit)
?italic
lm_r2 <- function(lm) {
r2 <- format(summary(lm)$r.squared, 2)
paste(~~italic(r)^2~~, r2)
}
lm_r2 <- function(lm) {
r2 <- format(summary(lm)$r.squared, 2)
paste(~~italic(r)^2~, r2)
}
lm_r2 <- function(lm) {
r2 <- format(summary(lm)$r.squared, 2)
as.character(as.expression(italic(r)^2~"="~r2))
}
p1 + geom_text(aes(x = 25, y = 300, label = lm_r2(fit)))
p1 + geom_text(aes(x = 0.2*min(trees$Height), y = 0.8*max(trees$Volume), label = lm_r2(fit)))
p1 + geom_text(aes(x = min(trees$Height) + 0.2*(max(trees$Height) - min(trees$Height)), y = 0.8*max(trees$Volume), label = lm_r2(fit)))
lm_r2 <- function(lm) {
r2 <- format(summary(lm)$r.squared, 2)
as.character(as.expression(substitute(italic(r)^2~"="~r2, r2)))
}
p1 + geom_text(aes(x = min(trees$Height) + 0.2*(max(trees$Height) - min(trees$Height)), y = 0.8*max(trees$Volume), label = lm_r2(fit)))
lm_r2 <- function(lm) {
vals <- list(r2 = format(summary(lm)$r.squared, 2))
as.character(as.expression(substitute(italic(r)^2~"="~r2, vals)))
}
p1 + geom_text(aes(x = min(trees$Height) + 0.2*(max(trees$Height) - min(trees$Height)), y = 0.8*max(trees$Volume), label = lm_r2(fit)))
lm_r2 <- function(lm) {
vals <- list(r2 = format(summary(lm)$r.squared, 2))
as.character(as.expression(substitute(~~italic(r)^2~"="~r2, vals)))
}
p1 + geom_text(aes(x = min(trees$Height) + 0.2*(max(trees$Height) - min(trees$Height)), y = 0.8*max(trees$Volume), label = lm_r2(fit)))
format(summary(lm)$r.squared, 2)
format(summary(fit)$r.squared, 2)
format(summary(fit)$r.squared, digits=2)
lm_r2 <- function(lm) {
vals <- list(r2 = format(summary(lm)$r.squared, digits = 2))
as.character(as.expression(substitute(~~italic(r)^2~"="~r2, vals)))
}
format(summary(fit)$r.squared, digits=2)
p1 + geom_text(aes(x = min(trees$Height) + 0.2*(max(trees$Height) - min(trees$Height)), y = 0.8*max(trees$Volume), label = lm_r2(fit)))
lm_r2 <- function(lm) {
vals <- list(r2 = format(summary(lm)$r.squared, digits = 2))
as.character(as.expression(substitute(italic(r)^2 "=" r2, vals)))
}
lm_r2 <- function(lm) {
vals <- list(r2 = format(summary(lm)$r.squared, digits = 2))
as.character(as.expression(substitute(italic(r)^2 "=" r2, vals)))
}
lm_r2 <- function(lm) {
vals <- list(r2 = format(summary(lm)$r.squared, digits = 2))
as.character(as.expression(substitute(italic(r)^2~"="~r2, vals)))
}
p1 + geom_text(aes(x = min(trees$Height) + 0.2*(max(trees$Height) - min(trees$Height)), y = 0.8*max(trees$Volume), label = lm_r2(fit)))
p1 + geom_text(aes(x = min(trees$Height) + 0.2*(max(trees$Height) - min(trees$Height)), y = 0.8*max(trees$Volume), label = lm_r2(fit)), parse=TRUE)
lm_r2 <- function(lm) {
vals <- list(r2 = format(summary(lm)$r.squared, digits = 2))
as.character(as.expression(substitute(~~italic(r)^2~"="~r2, vals)))
}
fit1 <- lm(Volume ~ Height, data=trees)
fit2 <- lm(volume ~ Height, data=trees)
volume.plot.label <- min(trees$Volume) +
0.8*(max(trees$Volume) - min(trees$Volume))
height.plot.label <- min(trees$Height) +
0.2*(max(trees$Height) - min(trees$Height))
girth.plot.label <- min(trees$Girth) +
0.2*(max(trees$Girth) - min(trees$Girth))
p <- ggplot(trees) + geom_point()
p + aes(Height, Volume) + geom_smooth(method="lm") +
geom_text(aes(x = height.plot.label, y = volume.plot.label,
label = lm_r2(fit1)))
p + aes(Height, Volume) + geom_smooth(method="lm") +
geom_text(aes(x = height.plot.label, y = volume.plot.label,
label = lm_r2(fit1)), parse = TRUE)
p + aes(Girth, Volume) + geom_smooth(method="lm") +
geom_text(aes(x = girth.plot.label, y = volume.plot.label,
label = lm_r2(fit2)), parse = TRUE)
fit2 <- lm(Girth ~ Height, data=trees)
p + aes(Girth, Volume) + geom_smooth(method="lm") +
geom_text(aes(x = girth.plot.label, y = volume.plot.label,
label = lm_r2(fit2)), parse = TRUE)
fit2 <- lm(Volume ~ Girth, data=trees)
p + aes(Girth, Volume) + geom_smooth(method="lm") +
geom_text(aes(x = girth.plot.label, y = volume.plot.label,
label = lm_r2(fit2)), parse = TRUE)
p + aes(Girth, Volume) + geom_smooth(method="lm") +
geom_text(aes(x = girth.plot.label, y = volume.plot.label,
label = lm_r2(fit2)), parse = TRUE)
?format
?grid.arrange
summary(lm(HEight~Girth))
summary(lm(Height~Girth, data=trees))
summary(lm(Height~Girth, data=trees))$r.squared
format(summary(lm(Height~Girth, data=trees))$r.squared, digits = 2)
publish(user = "codith", repo = "data-products-app")
